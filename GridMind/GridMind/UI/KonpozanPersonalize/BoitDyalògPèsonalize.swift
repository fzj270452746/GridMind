//
//  BoitDyal√≤gP√®sonalize.swift
//  GridMind
//
//  Custom Alert Dialog (BoitDyal√≤g = Dialog Box in Haitian Creole)
//

import UIKit

// MARK: - Dialog Configuration

struct KonfigiraskonDyal√≤g {
    let tik√®t: String
    let mesaj: String
    let boutons: [KonfigiraskonBoutonDyal√≤g]

    struct KonfigiraskonBoutonDyal√≤g {
        let t√®ks: String
        let koul√®: UIColor
        let aksyon: () -> Void
    }
}

// MARK: - Dialog Builder

class Konstryikt√®Dyal√≤g {
    private var tik√®t: String = ""
    private var mesaj: String = ""
    private var boutons: [KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g] = []

    func av√®kTik√®t(_ tik√®t: String) -> Self {
        self.tik√®t = tik√®t
        return self
    }

    func av√®kMesaj(_ mesaj: String) -> Self {
        self.mesaj = mesaj
        return self
    }

    func ajouteBouton(t√®ks: String, koul√®: UIColor, aksyon: @escaping () -> Void) -> Self {
        boutons.append(.init(t√®ks: t√®ks, koul√®: koul√®, aksyon: aksyon))
        return self
    }

    func konstryi() -> KonfigiraskonDyal√≤g {
        .init(tik√®t: tik√®t, mesaj: mesaj, boutons: boutons)
    }
}

// MARK: - View Factory for Dialog Components

fileprivate protocol FactoryKonpozanDyal√≤g {
    func kreeKont√®n√®() -> UIView
    func kreeTik√®t() -> UILabel
    func kreeMesaj() -> UILabel
    func kreeStackBouton() -> UIStackView
}

fileprivate struct FactoryStandardDyal√≤g: FactoryKonpozanDyal√≤g {
    func kreeKont√®n√®() -> UIView {
        let vi = UIView()
        vi.backgroundColor = .white
        vi.layer.cornerRadius = 24
        vi.layer.shadowColor = UIColor.black.cgColor
        vi.layer.shadowOffset = CGSize(width: 0, height: 10)
        vi.layer.shadowOpacity = 0.3
        vi.layer.shadowRadius = 20
        vi.translatesAutoresizingMaskIntoConstraints = false
        return vi
    }

    func kreeTik√®t() -> UILabel {
        let label = UILabel()
        label.font = .systemFont(ofSize: 28, weight: .bold)
        label.textAlignment = .center
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }

    func kreeMesaj() -> UILabel {
        let label = UILabel()
        label.font = .systemFont(ofSize: 16, weight: .regular)
        label.textAlignment = .center
        label.numberOfLines = 0
        label.textColor = .darkGray
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }

    func kreeStackBouton() -> UIStackView {
        let stack = UIStackView()
        stack.axis = .horizontal
        stack.distribution = .fillEqually
        stack.spacing = 12
        stack.translatesAutoresizingMaskIntoConstraints = false
        return stack
    }
}

// MARK: - Main Dialog View

class BoitDyal√≤gP√®sonalize: UIView {

    private let factory: FactoryKonpozanDyal√≤g = FactoryStandardDyal√≤g()
    private lazy var kont√®n√®Vi = factory.kreeKont√®n√®()
    private lazy var tik√®t = factory.kreeTik√®t()
    private lazy var mesaj = factory.kreeMesaj()
    private lazy var boutonPila = factory.kreeStackBouton()
    private var aksyonBouton: [() -> Void] = []

    // MARK: - Initialization
    override init(frame: CGRect) {
        super.init(frame: frame)
        konfigireUI()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - UI Configuration
    private func konfigireUI() {
        backgroundColor = UIColor.black.withAlphaComponent(0.6)
        alpha = 0

        addSubview(kont√®n√®Vi)
        kont√®n√®Vi.addSubview(tik√®t)
        kont√®n√®Vi.addSubview(mesaj)
        kont√®n√®Vi.addSubview(boutonPila)

        NSLayoutConstraint.activate([
            kont√®n√®Vi.centerXAnchor.constraint(equalTo: centerXAnchor),
            kont√®n√®Vi.centerYAnchor.constraint(equalTo: centerYAnchor),
            kont√®n√®Vi.widthAnchor.constraint(equalToConstant: 300),
            kont√®n√®Vi.heightAnchor.constraint(greaterThanOrEqualToConstant: 200),

            tik√®t.topAnchor.constraint(equalTo: kont√®n√®Vi.topAnchor, constant: 30),
            tik√®t.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: 20),
            tik√®t.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -20),

            mesaj.topAnchor.constraint(equalTo: tik√®t.bottomAnchor, constant: 16),
            mesaj.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: 20),
            mesaj.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -20),

            boutonPila.topAnchor.constraint(equalTo: mesaj.bottomAnchor, constant: 30),
            boutonPila.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: 20),
            boutonPila.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -20),
            boutonPila.bottomAnchor.constraint(equalTo: kont√®n√®Vi.bottomAnchor, constant: -20),
            boutonPila.heightAnchor.constraint(equalToConstant: 50)
        ])
    }

    func konfigure(tik√®t: String, mesaj: String, bouton: [(t√®ks: String, koul√®: UIColor, aksyon: () -> Void)]) {
        let konfig = KonfigiraskonDyal√≤g(
            tik√®t: tik√®t,
            mesaj: mesaj,
            boutons: bouton.map { .init(t√®ks: $0.t√®ks, koul√®: $0.koul√®, aksyon: $0.aksyon) }
        )
        aplikeKonfigirasyon(konfig)
    }

    private func aplikeKonfigirasyon(_ konfig: KonfigiraskonDyal√≤g) {
        tik√®t.text = konfig.tik√®t
        mesaj.text = konfig.mesaj
        boutonPila.arrangedSubviews.forEach { $0.removeFromSuperview() }
        aksyonBouton = konfig.boutons.map { $0.aksyon }

        konfig.boutons.enumerated().forEach { idx, btnKonfig in
            let btn = kreyeBouton(av√®k: btnKonfig, tag: idx)
            boutonPila.addArrangedSubview(btn)
        }
    }

    private func kreyeBouton(
        av√®k konfig: KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g,
        tag: Int
    ) -> UIButton {
        let btn = UIButton(type: .system)
        let aksyons: [(Selector, UIControl.Event)] = [
            (#selector(boutonTape(_:)), .touchUpInside),
            (#selector(boutonPreseAnba(_:)), .touchDown),
            (#selector(boutonLage(_:)), [.touchUpInside, .touchUpOutside])
        ]

        btn.setTitle(konfig.t√®ks, for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 17, weight: .semibold)
        btn.backgroundColor = konfig.koul√®
        btn.setTitleColor(.white, for: .normal)
        btn.layer.cornerRadius = 12
        btn.tag = tag

        aksyons.forEach { btn.addTarget(self, action: $0.0, for: $0.1) }

        return btn
    }

    // MARK: - Actions
    @objc private func boutonTape(_ bouton: UIButton) {
        if bouton.tag < aksyonBouton.count {
            aksyonBouton[bouton.tag]()
        }
        kache()
    }

    @objc private func boutonPreseAnba(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.1) {
            bouton.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }
    }

    @objc private func boutonLage(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.1) {
            bouton.transform = .identity
        }
    }

    // MARK: - Show/Hide
    func afiche(nan vi: UIView) {
        vi.addSubview(self)
        self.frame = vi.bounds

        kont√®n√®Vi.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)

        UIView.animate(withDuration: 0.3, delay: 0, usingSpringWithDamping: 0.7, initialSpringVelocity: 0.5, options: .curveEaseOut) {
            self.alpha = 1
            self.kont√®n√®Vi.transform = .identity
        }
    }

    func kache() {
        UIView.animate(withDuration: 0.2, animations: {
            self.alpha = 0
            self.kont√®n√®Vi.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
        }) { _ in
            self.removeFromSuperview()
        }
    }
}

// MARK: - Convenience Factory Methods

extension BoitDyal√≤gP√®sonalize {
    static func aficheSiy√®s(
        nan vi: UIView,
        mesaj: String,
        pwen: Int? = nil,
        akerebouton: @escaping () -> Void
    ) {
        let mesajKonpl√® = pwen.map { mesaj + "\n\nüéâ +\($0) points" } ?? mesaj
        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t("üéä Success!")
            .av√®kMesaj(mesajKonpl√®)
            .ajouteBouton(
                t√®ks: "Continue",
                koul√®: .init(red: 0.2, green: 0.7, blue: 0.5, alpha: 1.0),
                aksyon: akerebouton
            )
            .konstryi()

        let dyal√≤g = kreyeEAfiche(konfig: konfig, nan: vi)
        _ = dyal√≤g
    }

    static func aficheEch√®k(
        nan vi: UIView,
        mesaj: String,
        reeseyeAksyon: @escaping () -> Void
    ) {
        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t("üòî Game Over")
            .av√®kMesaj(mesaj)
            .ajouteBouton(
                t√®ks: "Try Again",
                koul√®: .init(red: 0.9, green: 0.4, blue: 0.4, alpha: 1.0),
                aksyon: reeseyeAksyon
            )
            .konstryi()

        let dyal√≤g = kreyeEAfiche(konfig: konfig, nan: vi)
        _ = dyal√≤g
    }

    static func aficheKonfimmasyon(
        nan vi: UIView,
        tik√®t: String,
        mesaj: String,
        konfimeAksyon: @escaping () -> Void,
        anileAksyon: @escaping () -> Void
    ) {
        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t(tik√®t)
            .av√®kMesaj(mesaj)
            .ajouteBouton(t√®ks: "Cancel", koul√®: .lightGray, aksyon: anileAksyon)
            .ajouteBouton(
                t√®ks: "Confirm",
                koul√®: .init(red: 0.2, green: 0.5, blue: 0.8, alpha: 1.0),
                aksyon: konfimeAksyon
            )
            .konstryi()

        let dyal√≤g = kreyeEAfiche(konfig: konfig, nan: vi)
        _ = dyal√≤g
    }

    private static func kreyeEAfiche(
        konfig: KonfigiraskonDyal√≤g,
        nan vi: UIView
    ) -> BoitDyal√≤gP√®sonalize {
        let dyal√≤g = BoitDyal√≤gP√®sonalize()
        dyal√≤g.aplikeKonfigirasyon(konfig)
        dyal√≤g.afiche(nan: vi)
        return dyal√≤g
    }
}
