//
//  BoitDyal√≤gP√®sonalize.swift
//  GridMind
//
//  Custom Alert Dialog (BoitDyal√≤g = Dialog Box in Haitian Creole)
//

import UIKit

// MARK: - Dialog Data Model

struct KonfigiraskonDyal√≤g {
    let tik√®t: String
    let mesaj: String
    let boutons: [KonfigiraskonBoutonDyal√≤g]

    struct KonfigiraskonBoutonDyal√≤g {
        let t√®ks: String
        let koul√®: UIColor
        let aksyon: () -> Void
    }
}

// MARK: - Builder Pattern

class Konstryikt√®Dyal√≤g {
    private var nonTik√®t: String = ""
    private var t√®ksMesaj: String = ""
    private var listeBouton: [KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g] = []

    func av√®kTik√®t(_ tik√®t: String) -> Self {
        self.nonTik√®t = tik√®t
        return self
    }

    func av√®kMesaj(_ mesaj: String) -> Self {
        self.t√®ksMesaj = mesaj
        return self
    }

    func ajouteBouton(t√®ks: String, koul√®: UIColor, aksyon: @escaping () -> Void) -> Self {
        let konfig = KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g(
            t√®ks: t√®ks,
            koul√®: koul√®,
            aksyon: aksyon
        )
        listeBouton.append(konfig)
        return self
    }

    func konstryi() -> KonfigiraskonDyal√≤g {
        return KonfigiraskonDyal√≤g(
            tik√®t: nonTik√®t,
            mesaj: t√®ksMesaj,
            boutons: listeBouton
        )
    }
}

// MARK: - Component Factory Protocol

fileprivate protocol FactoryKonpozanDyal√≤g {
    func kreeKont√®n√®() -> UIView
    func kreeTik√®t() -> UILabel
    func kreeMesaj() -> UILabel
    func kreeStackBouton() -> UIStackView
}

// MARK: - Standard Factory Implementation

fileprivate struct ImplemantasyonFactoryStandard: FactoryKonpozanDyal√≤g {
    func kreeKont√®n√®() -> UIView {
        let konten√®Pr√®nsipal = UIView()
        konten√®Pr√®nsipal.backgroundColor = UIColor(white: 1.0, alpha: 1.0)
        konten√®Pr√®nsipal.layer.cornerRadius = 24
        konten√®Pr√®nsipal.translatesAutoresizingMaskIntoConstraints = false

        let propryeteLonm = konten√®Pr√®nsipal.layer
        propryeteLonm.shadowColor = UIColor.black.cgColor
        propryeteLonm.shadowOffset = CGSize(width: 0, height: 10)
        propryeteLonm.shadowOpacity = 0.3
        propryeteLonm.shadowRadius = 20

        return konten√®Pr√®nsipal
    }

    func kreeTik√®t() -> UILabel {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 28, weight: .bold)
        label.textAlignment = .center
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }

    func kreeMesaj() -> UILabel {
        let t√®ks = UILabel()
        t√®ks.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        t√®ks.textAlignment = .center
        t√®ks.numberOfLines = 0
        t√®ks.textColor = UIColor.darkGray
        t√®ks.translatesAutoresizingMaskIntoConstraints = false
        return t√®ks
    }

    func kreeStackBouton() -> UIStackView {
        let pilaj = UIStackView()
        pilaj.axis = .horizontal
        pilaj.distribution = .fillEqually
        pilaj.spacing = 12
        pilaj.translatesAutoresizingMaskIntoConstraints = false
        return pilaj
    }
}

// MARK: - Custom Dialog View

class BoitDyal√≤gP√®sonalize: UIView {

    private let fabrikKompozan: FactoryKonpozanDyal√≤g
    private lazy var vizyelKonten√® = fabrikKompozan.kreeKont√®n√®()
    private lazy var labelTik√®t = fabrikKompozan.kreeTik√®t()
    private lazy var labelMesaj = fabrikKompozan.kreeMesaj()
    private lazy var stakBouton = fabrikKompozan.kreeStackBouton()
    private var reponsBouton: [() -> Void] = []

    override init(frame: CGRect) {
        self.fabrikKompozan = ImplemantasyonFactoryStandard()
        super.init(frame: frame)
        preparUI()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func preparUI() {
        let koul√®Fon = UIColor.black.withAlphaComponent(0.6)
        backgroundColor = koul√®Fon
        alpha = 0

        addSubview(vizyelKonten√®)
        vizyelKonten√®.addSubview(labelTik√®t)
        vizyelKonten√®.addSubview(labelMesaj)
        vizyelKonten√®.addSubview(stakBouton)

        let kontr√®ntKonten√® = [
            vizyelKonten√®.centerXAnchor.constraint(equalTo: centerXAnchor),
            vizyelKonten√®.centerYAnchor.constraint(equalTo: centerYAnchor),
            vizyelKonten√®.widthAnchor.constraint(equalToConstant: 300),
            vizyelKonten√®.heightAnchor.constraint(greaterThanOrEqualToConstant: 200)
        ]

        let kontr√®ntTik√®t = [
            labelTik√®t.topAnchor.constraint(equalTo: vizyelKonten√®.topAnchor, constant: 30),
            labelTik√®t.leadingAnchor.constraint(equalTo: vizyelKonten√®.leadingAnchor, constant: 20),
            labelTik√®t.trailingAnchor.constraint(equalTo: vizyelKonten√®.trailingAnchor, constant: -20)
        ]

        let kontr√®ntMesaj = [
            labelMesaj.topAnchor.constraint(equalTo: labelTik√®t.bottomAnchor, constant: 16),
            labelMesaj.leadingAnchor.constraint(equalTo: vizyelKonten√®.leadingAnchor, constant: 20),
            labelMesaj.trailingAnchor.constraint(equalTo: vizyelKonten√®.trailingAnchor, constant: -20)
        ]

        let kontr√®ntBouton = [
            stakBouton.topAnchor.constraint(equalTo: labelMesaj.bottomAnchor, constant: 30),
            stakBouton.leadingAnchor.constraint(equalTo: vizyelKonten√®.leadingAnchor, constant: 20),
            stakBouton.trailingAnchor.constraint(equalTo: vizyelKonten√®.trailingAnchor, constant: -20),
            stakBouton.bottomAnchor.constraint(equalTo: vizyelKonten√®.bottomAnchor, constant: -20),
            stakBouton.heightAnchor.constraint(equalToConstant: 50)
        ]

        NSLayoutConstraint.activate(kontr√®ntKonten√® + kontr√®ntTik√®t + kontr√®ntMesaj + kontr√®ntBouton)
    }

    func konfigure(tik√®t: String, mesaj: String, bouton: [(t√®ks: String, koul√®: UIColor, aksyon: () -> Void)]) {
        let listKonfig = bouton.map { elem in
            KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g(
                t√®ks: elem.t√®ks,
                koul√®: elem.koul√®,
                aksyon: elem.aksyon
            )
        }

        let konfigTotal = KonfigiraskonDyal√≤g(
            tik√®t: tik√®t,
            mesaj: mesaj,
            boutons: listKonfig
        )

        aplikeKonfigirasyon(konfigTotal)
    }

    private func aplikeKonfigirasyon(_ konfig: KonfigiraskonDyal√≤g) {
        labelTik√®t.text = konfig.tik√®t
        labelMesaj.text = konfig.mesaj

        stakBouton.arrangedSubviews.forEach { $0.removeFromSuperview() }
        reponsBouton = konfig.boutons.map { $0.aksyon }

        for (idx, konfiBouton) in konfig.boutons.enumerated() {
            let btn = konstruBouton(av√®k: konfiBouton, tag: idx)
            stakBouton.addArrangedSubview(btn)
        }
    }

    private func konstruBouton(av√®k konfig: KonfigiraskonDyal√≤g.KonfigiraskonBoutonDyal√≤g, tag: Int) -> UIButton {
        let bouton = UIButton(type: .system)

        bouton.setTitle(konfig.t√®ks, for: .normal)
        bouton.titleLabel?.font = UIFont.systemFont(ofSize: 17, weight: .semibold)
        bouton.backgroundColor = konfig.koul√®
        bouton.setTitleColor(UIColor.white, for: .normal)
        bouton.layer.cornerRadius = 12
        bouton.tag = tag

        bouton.addTarget(self, action: #selector(jereKlikBouton(_:)), for: .touchUpInside)
        bouton.addTarget(self, action: #selector(jerePresBouton(_:)), for: .touchDown)
        bouton.addTarget(self, action: #selector(jereRelasBouton(_:)), for: [.touchUpInside, .touchUpOutside])

        return bouton
    }

    @objc private func jereKlikBouton(_ bouton: UIButton) {
        let tagBouton = bouton.tag
        if tagBouton >= 0 && tagBouton < reponsBouton.count {
            reponsBouton[tagBouton]()
        }
        kache()
    }

    @objc private func jerePresBouton(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.1) {
            bouton.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }
    }

    @objc private func jereRelasBouton(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.1) {
            bouton.transform = CGAffineTransform.identity
        }
    }

    func afiche(nan vi: UIView) {
        vi.addSubview(self)
        self.frame = vi.bounds

        let transformInisyal = CGAffineTransform(scaleX: 0.8, y: 0.8)
        vizyelKonten√®.transform = transformInisyal

        UIView.animate(
            withDuration: 0.3,
            delay: 0,
            usingSpringWithDamping: 0.7,
            initialSpringVelocity: 0.5,
            options: .curveEaseOut,
            animations: {
                self.alpha = 1
                self.vizyelKonten√®.transform = CGAffineTransform.identity
            },
            completion: nil
        )
    }

    func kache() {
        let transformFinal = CGAffineTransform(scaleX: 0.8, y: 0.8)

        UIView.animate(
            withDuration: 0.2,
            animations: {
                self.alpha = 0
                self.vizyelKonten√®.transform = transformFinal
            },
            completion: { _ in
                self.removeFromSuperview()
            }
        )
    }
}

// MARK: - Factory Helper Methods

extension BoitDyal√≤gP√®sonalize {
    static func aficheSiy√®s(nan vi: UIView, mesaj: String, pwen: Int? = nil, akerebouton: @escaping () -> Void) {
        var mesajFinal = mesaj
        if let skorPwen = pwen {
            mesajFinal = "\(mesaj)\n\nüéâ +\(skorPwen) points"
        }

        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t("üéä Success!")
            .av√®kMesaj(mesajFinal)
            .ajouteBouton(
                t√®ks: "Continue",
                koul√®: UIColor(red: 0.2, green: 0.7, blue: 0.5, alpha: 1.0),
                aksyon: akerebouton
            )
            .konstryi()

        kreyeEAficheAv√®kKonfig(konfig, nan: vi)
    }

    static func aficheEch√®k(nan vi: UIView, mesaj: String, reeseyeAksyon: @escaping () -> Void) {
        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t("üòî Game Over")
            .av√®kMesaj(mesaj)
            .ajouteBouton(
                t√®ks: "Try Again",
                koul√®: UIColor(red: 0.9, green: 0.4, blue: 0.4, alpha: 1.0),
                aksyon: reeseyeAksyon
            )
            .konstryi()

        kreyeEAficheAv√®kKonfig(konfig, nan: vi)
    }

    static func aficheKonfimmasyon(
        nan vi: UIView,
        tik√®t: String,
        mesaj: String,
        konfimeAksyon: @escaping () -> Void,
        anileAksyon: @escaping () -> Void
    ) {
        let konfig = Konstryikt√®Dyal√≤g()
            .av√®kTik√®t(tik√®t)
            .av√®kMesaj(mesaj)
            .ajouteBouton(
                t√®ks: "Cancel",
                koul√®: UIColor.lightGray,
                aksyon: anileAksyon
            )
            .ajouteBouton(
                t√®ks: "Confirm",
                koul√®: UIColor(red: 0.2, green: 0.5, blue: 0.8, alpha: 1.0),
                aksyon: konfimeAksyon
            )
            .konstryi()

        kreyeEAficheAv√®kKonfig(konfig, nan: vi)
    }

    private static func kreyeEAficheAv√®kKonfig(_ konfig: KonfigiraskonDyal√≤g, nan vi: UIView) {
        let dyal√≤g = BoitDyal√≤gP√®sonalize()
        dyal√≤g.aplikeKonfigirasyon(konfig)
        dyal√≤g.afiche(nan: vi)
    }
}
