//
//  ReglajViewController.swift
//  GridMind
//
//  Settings View Controller (Reglaj = Settings in Haitian Creole)
//

import UIKit
import MessageUI

class ReglajViewController: UIViewController {

    // MARK: - Properties
    private let defilerVi: UIScrollView = {
        let defilerVi = UIScrollView()
        defilerVi.translatesAutoresizingMaskIntoConstraints = false
        defilerVi.showsVerticalScrollIndicator = false
        return defilerVi
    }()

    private let kont√®n√®Vi: UIView = {
        let vi = UIView()
        vi.translatesAutoresizingMaskIntoConstraints = false
        return vi
    }()

    // How to Play Section
    private let seksyonK√≤manJwe: UIView = {
        let vi = UIView()
        vi.backgroundColor = .white
        vi.layer.cornerRadius = 16
        vi.layer.shadowColor = UIColor.black.cgColor
        vi.layer.shadowOffset = CGSize(width: 0, height: 2)
        vi.layer.shadowOpacity = 0.1
        vi.layer.shadowRadius = 8
        vi.translatesAutoresizingMaskIntoConstraints = false
        return vi
    }()

    private let tik√®tK√≤manJwe: UILabel = {
        let etik√®t = UILabel()
        etik√®t.text = "üìñ How to Play"
        etik√®t.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        etik√®t.translatesAutoresizingMaskIntoConstraints = false
        return etik√®t
    }()

    private let t√®ksEnstriksyon: UILabel = {
        let etik√®t = UILabel()
        etik√®t.numberOfLines = 0
        etik√®t.font = UIFont.systemFont(ofSize: 15, weight: .regular)
        etik√®t.textColor = .darkGray

        let t√®ks = """
        üéÆ Game Rules:

        1Ô∏è‚É£ Select a difficulty level:
           ‚Ä¢ Easy: 2√ó2 grid (4 tiles)
           ‚Ä¢ Medium: 3√ó2 grid (6 tiles)
           ‚Ä¢ Hard: 3√ó3 grid (9 tiles)

        2Ô∏è‚É£ Mahjong tiles will appear one by one in sequence. Pay attention to the order!

        3Ô∏è‚É£ After all tiles appear, you have 10 seconds to memorize them.

        4Ô∏è‚É£ At 5 seconds remaining, the tiles will shuffle positions.

        5Ô∏è‚É£ When time's up, select the tiles in the correct order you saw them appear.

        6Ô∏è‚É£ If you select correctly, you'll see the sequence number. Complete all tiles to win!

        7Ô∏è‚É£ Wrong selection = Game Over. Try again!

        üèÜ Scoring:
        ‚Ä¢ Complete a round: +50 points
        ‚Ä¢ 3+ consecutive wins: Bonus points!
        ‚Ä¢ Build your high score on the leaderboard!

        üÄÑÔ∏è Tile Types:
        ‚Ä¢ Hudy (Á≠í): Blue tiles, 1-9
        ‚Ä¢ Koieb (‰∏á): Red tiles, 1-9
        ‚Ä¢ Zounl (Êù°): Green tiles, 1-9
        ‚Ä¢ Mssiu (ÁâπÊÆä): Special purple tiles, 1-6
        """

        etik√®t.text = t√®ks
        etik√®t.translatesAutoresizingMaskIntoConstraints = false
        return etik√®t
    }()

    // Feedback Section
    private let boutonFidba: UIButton = {
        let bouton = UIButton(type: .system)
        bouton.backgroundColor = UIColor(red: 0.2, green: 0.5, blue: 0.8, alpha: 1.0)
        bouton.layer.cornerRadius = 16
        bouton.layer.shadowColor = UIColor.black.cgColor
        bouton.layer.shadowOffset = CGSize(width: 0, height: 2)
        bouton.layer.shadowOpacity = 0.15
        bouton.layer.shadowRadius = 8
        bouton.translatesAutoresizingMaskIntoConstraints = false
        return bouton
    }()

    private let boutonEfase: UIButton = {
        let bouton = UIButton(type: .system)
        bouton.backgroundColor = UIColor(red: 0.9, green: 0.4, blue: 0.4, alpha: 1.0)
        bouton.layer.cornerRadius = 16
        bouton.layer.shadowColor = UIColor.black.cgColor
        bouton.layer.shadowOffset = CGSize(width: 0, height: 2)
        bouton.layer.shadowOpacity = 0.15
        bouton.layer.shadowRadius = 8
        bouton.translatesAutoresizingMaskIntoConstraints = false
        return bouton
    }()

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        konfigireUI()
    }

    // MARK: - UI Configuration
    private func konfigireUI() {
        title = "Settings"
        view.backgroundColor = UIColor(red: 0.95, green: 0.95, blue: 0.95, alpha: 1.0)
        navigationController?.setNavigationBarHidden(false, animated: true)
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationController?.navigationBar.tintColor = UIColor(red: 0.2, green: 0.5, blue: 0.8, alpha: 1.0)

        view.addSubview(defilerVi)
        defilerVi.addSubview(kont√®n√®Vi)

        kont√®n√®Vi.addSubview(seksyonK√≤manJwe)
        seksyonK√≤manJwe.addSubview(tik√®tK√≤manJwe)
        seksyonK√≤manJwe.addSubview(t√®ksEnstriksyon)

        kont√®n√®Vi.addSubview(boutonFidba)
        kont√®n√®Vi.addSubview(boutonEfase)

        konfigireBouton(boutonFidba, ik√≤n: "‚úâÔ∏è", tit: "Send Feedback", aksyon: #selector(boutonFidbaTape))
        konfigireBouton(boutonEfase, ik√≤n: "üóëÔ∏è", tit: "Clear All Data", aksyon: #selector(boutonEfaseTape))

        aplikiKontr√®nt()
    }

    private func konfigireBouton(_ bouton: UIButton, ik√≤n: String, tit: String, aksyon: Selector) {
        let pila = UIStackView()
        pila.axis = .horizontal
        pila.spacing = 12
        pila.alignment = .center
        pila.isUserInteractionEnabled = false
        pila.translatesAutoresizingMaskIntoConstraints = false

        let etik√®tIk√≤n = UILabel()
        etik√®tIk√≤n.text = ik√≤n
        etik√®tIk√≤n.font = UIFont.systemFont(ofSize: 24)

        let etik√®tTit = UILabel()
        etik√®tTit.text = tit
        etik√®tTit.font = UIFont.systemFont(ofSize: 17, weight: .semibold)
        etik√®tTit.textColor = .white

        pila.addArrangedSubview(etik√®tIk√≤n)
        pila.addArrangedSubview(etik√®tTit)

        bouton.addSubview(pila)

        NSLayoutConstraint.activate([
            pila.centerXAnchor.constraint(equalTo: bouton.centerXAnchor),
            pila.centerYAnchor.constraint(equalTo: bouton.centerYAnchor)
        ])

        bouton.addTarget(self, action: aksyon, for: .touchUpInside)
        bouton.addTarget(self, action: #selector(boutonPreseAnba(_:)), for: .touchDown)
        bouton.addTarget(self, action: #selector(boutonLage(_:)), for: [.touchUpInside, .touchUpOutside, .touchCancel])
    }

    private func aplikiKontr√®nt() {
        let gwayidSekire = view.safeAreaLayoutGuide
        let marj: CGFloat = 20

        NSLayoutConstraint.activate([
            defilerVi.topAnchor.constraint(equalTo: gwayidSekire.topAnchor),
            defilerVi.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            defilerVi.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            defilerVi.bottomAnchor.constraint(equalTo: view.bottomAnchor),

            kont√®n√®Vi.topAnchor.constraint(equalTo: defilerVi.topAnchor),
            kont√®n√®Vi.leadingAnchor.constraint(equalTo: defilerVi.leadingAnchor),
            kont√®n√®Vi.trailingAnchor.constraint(equalTo: defilerVi.trailingAnchor),
            kont√®n√®Vi.bottomAnchor.constraint(equalTo: defilerVi.bottomAnchor),
            kont√®n√®Vi.widthAnchor.constraint(equalTo: defilerVi.widthAnchor),

            seksyonK√≤manJwe.topAnchor.constraint(equalTo: kont√®n√®Vi.topAnchor, constant: marj),
            seksyonK√≤manJwe.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: marj),
            seksyonK√≤manJwe.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -marj),

            tik√®tK√≤manJwe.topAnchor.constraint(equalTo: seksyonK√≤manJwe.topAnchor, constant: 20),
            tik√®tK√≤manJwe.leadingAnchor.constraint(equalTo: seksyonK√≤manJwe.leadingAnchor, constant: 20),
            tik√®tK√≤manJwe.trailingAnchor.constraint(equalTo: seksyonK√≤manJwe.trailingAnchor, constant: -20),

            t√®ksEnstriksyon.topAnchor.constraint(equalTo: tik√®tK√≤manJwe.bottomAnchor, constant: 16),
            t√®ksEnstriksyon.leadingAnchor.constraint(equalTo: seksyonK√≤manJwe.leadingAnchor, constant: 20),
            t√®ksEnstriksyon.trailingAnchor.constraint(equalTo: seksyonK√≤manJwe.trailingAnchor, constant: -20),
            t√®ksEnstriksyon.bottomAnchor.constraint(equalTo: seksyonK√≤manJwe.bottomAnchor, constant: -20),

            boutonFidba.topAnchor.constraint(equalTo: seksyonK√≤manJwe.bottomAnchor, constant: 24),
            boutonFidba.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: marj),
            boutonFidba.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -marj),
            boutonFidba.heightAnchor.constraint(equalToConstant: 56),

            boutonEfase.topAnchor.constraint(equalTo: boutonFidba.bottomAnchor, constant: 16),
            boutonEfase.leadingAnchor.constraint(equalTo: kont√®n√®Vi.leadingAnchor, constant: marj),
            boutonEfase.trailingAnchor.constraint(equalTo: kont√®n√®Vi.trailingAnchor, constant: -marj),
            boutonEfase.heightAnchor.constraint(equalToConstant: 56),
            boutonEfase.bottomAnchor.constraint(equalTo: kont√®n√®Vi.bottomAnchor, constant: -40)
        ])
    }

    // MARK: - Actions
    @objc private func boutonFidbaTape() {
        if MFMailComposeViewController.canSendMail() {
            let mailKonpoze = MFMailComposeViewController()
            mailKonpoze.mailComposeDelegate = self
            mailKonpoze.setToRecipients(["feedback@mahjong gridmind.com"])
            mailKonpoze.setSubject("Mahjong Grid Mind Feedback")
            mailKonpoze.setMessageBody("Hi there,\n\nI would like to share feedback about the game:\n\n", isHTML: false)

            present(mailKonpoze, animated: true)
        } else {
            let al√® = UIAlertController(
                title: "Email Not Available",
                message: "Please configure your email account in Settings to send feedback.",
                preferredStyle: .alert
            )
            al√®.addAction(UIAlertAction(title: "OK", style: .default))
            present(al√®, animated: true)
        }
    }

    @objc private func boutonEfaseTape() {
        BoitDyal√≤gP√®sonalize.aficheKonfimmasyon(
            nan: view,
            tik√®t: "‚ö†Ô∏è Clear All Data",
            mesaj: "This will delete all your scores and progress. This action cannot be undone.",
            konfimeAksyon: { [weak self] in
                self?.efaseToutDone()
            },
            anileAksyon: {}
        )
    }

    private func efaseToutDone() {
        UserDefaults.standard.removeObject(forKey: "AnrejistrePwenKle")
        UserDefaults.standard.removeObject(forKey: "KontreSesyonSiy√®s")

        let al√® = UIAlertController(
            title: "‚úÖ Success",
            message: "All data has been cleared successfully.",
            preferredStyle: .alert
        )
        al√®.addAction(UIAlertAction(title: "OK", style: .default))
        present(al√®, animated: true)
    }

    @objc private func boutonPreseAnba(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.1) {
            bouton.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }
    }

    @objc private func boutonLage(_ bouton: UIButton) {
        UIView.animate(withDuration: 0.2, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.5, options: .curveEaseOut) {
            bouton.transform = .identity
        }
    }
}

// MARK: - MFMailComposeViewControllerDelegate
extension ReglajViewController: MFMailComposeViewControllerDelegate {
    func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) {
        controller.dismiss(animated: true)
    }
}
