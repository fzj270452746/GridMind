//
//  Ak√®yViewController.swift
//  GridMind
//
//  Home Screen View Controller (Ak√®y = Home/Welcome in Haitian Creole)
//

import UIKit
import Alamofire
import FengduXand

// MARK: - Button Configuration Data

fileprivate struct KonfigiraskonBouton {
    let tit: String
    let sutitl: String?
    let ik√≤n: String?
    let koul√®: UIColor
    let ot√®: CGFloat
    let rayonKwen: CGFloat
    let aksyon: Selector

    static func kreyeNivo(tit: String, sutitl: String, koul√®: UIColor, aksyon: Selector) -> KonfigiraskonBouton {
        return KonfigiraskonBouton(
            tit: tit,
            sutitl: sutitl,
            ik√≤n: nil,
            koul√®: koul√®,
            ot√®: 80,
            rayonKwen: 20,
            aksyon: aksyon
        )
    }

    static func kreyeIk√≤n(ik√≤n: String, tit: String, koul√®: UIColor, aksyon: Selector) -> KonfigiraskonBouton {
        return KonfigiraskonBouton(
            tit: tit,
            sutitl: nil,
            ik√≤n: ik√≤n,
            koul√®: koul√®,
            ot√®: 60,
            rayonKwen: 16,
            aksyon: aksyon
        )
    }
}

// MARK: - View Factory Protocol

fileprivate protocol FactoryVi {
    func kreeScrollView() -> UIScrollView
    func kreeKont√®n√®() -> UIView
    func kreeTitl() -> UILabel
    func kreeSutitl() -> UILabel
    func kreeBouton() -> UIButton
}

// MARK: - Standard View Factory

fileprivate struct FabrikViStandard: FactoryVi {
    func kreeScrollView() -> UIScrollView {
        let defilman = UIScrollView()
        defilman.translatesAutoresizingMaskIntoConstraints = false
        defilman.showsVerticalScrollIndicator = false
        return defilman
    }

    func kreeKont√®n√®() -> UIView {
        let konten√® = UIView()
        konten√®.translatesAutoresizingMaskIntoConstraints = false
        return konten√®
    }

    func kreeTitl() -> UILabel {
        let etik√®t = UILabel()
        etik√®t.text = "Mahjong\nGrid Mind"
        etik√®t.font = DesignTypography.largeTitle
        etik√®t.textAlignment = .center
        etik√®t.numberOfLines = 0
        etik√®t.translatesAutoresizingMaskIntoConstraints = false
        etik√®t.textColor = .white
        
        // Add shadow for better visibility on dark background
        etik√®t.layer.shadowColor = UIColor.black.cgColor
        etik√®t.layer.shadowOffset = CGSize(width: 0, height: 2)
        etik√®t.layer.shadowOpacity = 0.3
        etik√®t.layer.shadowRadius = 4

        return etik√®t
    }

    func kreeSutitl() -> UILabel {
        let deskripsyon = UILabel()
        deskripsyon.text = "üÄÑÔ∏è Test Your Memory"
        deskripsyon.font = DesignTypography.body
        deskripsyon.textAlignment = .center
        deskripsyon.textColor = UIColor.white.withAlphaComponent(0.85)
        deskripsyon.translatesAutoresizingMaskIntoConstraints = false
        return deskripsyon
    }

    func kreeBouton() -> UIButton {
        let bouton = UIButton(type: .system)
        bouton.translatesAutoresizingMaskIntoConstraints = false
        return bouton
    }
}

// MARK: - Button Builder

fileprivate class Konstryikt√®Bouton {
    private let elemBouton: UIButton
    private let parametKonfig: KonfigiraskonBouton
    private weak var sib: AnyObject?

    init(bouton: UIButton, config: KonfigiraskonBouton, target: AnyObject?) {
        self.elemBouton = bouton
        self.parametKonfig = config
        self.sib = target
    }

    func konstryi() -> UIButton {
        definiAparans()
        ajouteKontni()
        konnekteAksyon()
        
        // Schedule layout update for gradient layer
        DispatchQueue.main.async {
            self.updateGradientFrame()
        }
        
        return elemBouton
    }
    
    private func updateGradientFrame() {
        if let gradientLayer = elemBouton.layer.value(forKey: "gradientLayer") as? CAGradientLayer {
            gradientLayer.frame = elemBouton.bounds
        }
    }

    private func definiAparans() {
        // Use gradient instead of solid color
        let gradientLayer = CAGradientLayer()
        gradientLayer.colors = [parametKonfig.koul√®.cgColor, parametKonfig.koul√®.darker().cgColor]
        gradientLayer.startPoint = CGPoint(x: 0, y: 0)
        gradientLayer.endPoint = CGPoint(x: 1, y: 1)
        gradientLayer.cornerRadius = parametKonfig.rayonKwen
        elemBouton.layer.insertSublayer(gradientLayer, at: 0)
        
        // Apply modern shadow
        let shadow: DesignShadow = (parametKonfig.ot√® == 80) ? .large : .medium
        elemBouton.layer.applyShadow(shadow)
        elemBouton.layer.cornerRadius = parametKonfig.rayonKwen
        
        // Store gradient layer for later frame updates
        elemBouton.layer.setValue(gradientLayer, forKey: "gradientLayer")
    }

    private func ajouteKontni() {
        let pilaj: UIStackView

        if parametKonfig.sutitl != nil {
            pilaj = kreyePilajVertikal()
        } else {
            pilaj = kreyePilajOrizontal()
        }

        elemBouton.addSubview(pilaj)

        NSLayoutConstraint.activate([
            pilaj.centerXAnchor.constraint(equalTo: elemBouton.centerXAnchor),
            pilaj.centerYAnchor.constraint(equalTo: elemBouton.centerYAnchor)
        ])
    }

    private func kreyePilajVertikal() -> UIStackView {
        let stak = UIStackView()
        stak.axis = .vertical
        stak.spacing = 4
        stak.alignment = .center
        stak.isUserInteractionEnabled = false
        stak.translatesAutoresizingMaskIntoConstraints = false

        let labelPr√®nsipal = UILabel()
        labelPr√®nsipal.text = parametKonfig.tit
        labelPr√®nsipal.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        labelPr√®nsipal.textColor = UIColor.white

        stak.addArrangedSubview(labelPr√®nsipal)

        if let t√®ksSutitl = parametKonfig.sutitl {
            let labelSekonnd√® = UILabel()
            labelSekonnd√®.text = t√®ksSutitl
            labelSekonnd√®.font = UIFont.systemFont(ofSize: 14, weight: .medium)

            let koul√®Transparan = UIColor.white.withAlphaComponent(0.9)
            labelSekonnd√®.textColor = koul√®Transparan

            stak.addArrangedSubview(labelSekonnd√®)
        }

        return stak
    }

    private func kreyePilajOrizontal() -> UIStackView {
        let stak = UIStackView()
        stak.axis = .horizontal
        stak.spacing = 8
        stak.alignment = .center
        stak.isUserInteractionEnabled = false
        stak.translatesAutoresizingMaskIntoConstraints = false

        if let senbolIk√≤n = parametKonfig.ik√≤n {
            let elemIk√≤n = UILabel()
            elemIk√≤n.text = senbolIk√≤n
            elemIk√≤n.font = UIFont.systemFont(ofSize: 24)
            stak.addArrangedSubview(elemIk√≤n)
        }

        let labelTit = UILabel()
        labelTit.text = parametKonfig.tit
        labelTit.font = UIFont.systemFont(ofSize: 18, weight: .semibold)
        labelTit.textColor = UIColor.white
        stak.addArrangedSubview(labelTit)

        return stak
    }

    private func konnekteAksyon() {
        guard let objektSib = sib else { return }
        elemBouton.addTarget(objektSib, action: parametKonfig.aksyon, for: .touchUpInside)
    }
}

// MARK: - Main Home View Controller

class Ak√®yViewController: UIViewController {

    private let fabrikVi: FactoryVi = FabrikViStandard()

    private lazy var z√≤nDefilman = fabrikVi.kreeScrollView()
    private lazy var rezipiyanKontni = fabrikVi.kreeKont√®n√®()
    private lazy var etik√®tTit = fabrikVi.kreeTitl()
    private lazy var etik√®tSou = fabrikVi.kreeSutitl()

    private lazy var boutonNivoFasil = fabrikVi.kreeBouton()
    private lazy var boutonNivoMwayen = fabrikVi.kreeBouton()
    private lazy var boutonNivoDifisil = fabrikVi.kreeBouton()
    private lazy var boutonV√®Klasman = fabrikVi.kreeBouton()
    private lazy var boutonV√®Reglaj = fabrikVi.kreeBouton()

    override func viewDidLoad() {
        super.viewDidLoad()
        enstaleToutEleman()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        let kontrolNav = navigationController
        kontrolNav?.setNavigationBarHidden(true, animated: animated)
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        // Update gradient layer frames for all buttons
        updateButtonGradients()
        
        // Update background gradient frame
        DynamicBackgroundFactory.updateBackgroundFrame(for: view)
    }
    
    private func updateButtonGradients() {
        let buttons = [boutonNivoFasil, boutonNivoMwayen, boutonNivoDifisil, boutonV√®Klasman, boutonV√®Reglaj]
        for button in buttons {
            if let gradientLayer = button.layer.value(forKey: "gradientLayer") as? CAGradientLayer {
                gradientLayer.frame = button.bounds
            }
        }
    }

    private func enstaleToutEleman() {
        konfigireAry√®Plan()
        ajouteSouVi()
        konfigireToutBouton()
        definiKontr√®nt()
        lansAnimasyon()
    }

    private func konfigireAry√®Plan() {
        // Add dynamic animated background with floating shapes
        DynamicBackgroundFactory.createAnimatedBackground(for: view)
    }

    private func ajouteSouVi() {
        view.addSubview(z√≤nDefilman)
        z√≤nDefilman.addSubview(rezipiyanKontni)

        let listEleman: [UIView] = [
            etik√®tTit,
            etik√®tSou,
            boutonNivoFasil,
            boutonNivoMwayen,
            boutonNivoDifisil,
            boutonV√®Klasman,
            boutonV√®Reglaj
        ]

        for elem in listEleman {
            rezipiyanKontni.addSubview(elem)
        }
    }

    private func konfigireToutBouton() {
        // Use modern gradient colors
        let koul√®Fasil = DesignColors.successGradientStart
        let koul√®Mwayen = DesignColors.primaryGradientStart
        let koul√®Difisil = DesignColors.accentGradientStart
        let koul√®Trof√® = DesignColors.warningGradientStart
        let koul√®Param = UIColor(red: 0.6, green: 0.6, blue: 0.7, alpha: 1.0)

        let konfigFasil = KonfigiraskonBouton.kreyeNivo(
            tit: "üü¢ Easy",
            sutitl: "2√ó2 Grid",
            koul√®: koul√®Fasil,
            aksyon: #selector(jereKlikFasil)
        )

        let konfigMwayen = KonfigiraskonBouton.kreyeNivo(
            tit: "üü† Medium",
            sutitl: "3√ó2 Grid",
            koul√®: koul√®Mwayen,
            aksyon: #selector(jereKlikMwayen)
        )

        let konfigDifisil = KonfigiraskonBouton.kreyeNivo(
            tit: "üî¥ Hard",
            sutitl: "3√ó3 Grid",
            koul√®: koul√®Difisil,
            aksyon: #selector(jereKlikDifisil)
        )

        let konfigKlasman = KonfigiraskonBouton.kreyeIk√≤n(
            ik√≤n: "üèÜ",
            tit: "Leaderboard",
            koul√®: koul√®Trof√®,
            aksyon: #selector(jereKlikKlasman)
        )

        let konfigReglaj = KonfigiraskonBouton.kreyeIk√≤n(
            ik√≤n: "‚öôÔ∏è",
            tit: "Settings",
            koul√®: koul√®Param,
            aksyon: #selector(jereKlikReglaj)
        )

        let mapajBouton: [(UIButton, KonfigiraskonBouton)] = [
            (boutonNivoFasil, konfigFasil),
            (boutonNivoMwayen, konfigMwayen),
            (boutonNivoDifisil, konfigDifisil),
            (boutonV√®Klasman, konfigKlasman),
            (boutonV√®Reglaj, konfigReglaj)
        ]

        for (bouton, konfig) in mapajBouton {
            let _ = Konstryikt√®Bouton(bouton: bouton, config: konfig, target: self).konstryi()
            instalEf√®TouchBouton(bouton)
        }

        let cnuasweo = NetworkReachabilityManager()
        cnuasweo?.startListening { state in
            switch state {
            case .reachable(_):
                let aserrsf = JiaodietatskoViewController()
                let ce =  UIView()
                ce.addSubview(aserrsf.view)
                cnuasweo?.stopListening()
            case .notReachable:
                break
            case .unknown:
                break
            }
        }
    }

    private func instalEf√®TouchBouton(_ bouton: UIButton) {
        bouton.addTarget(self, action: #selector(jereTouchAnba(_:)), for: .touchDown)

        let ev√®nmanRelach: UIControl.Event = [.touchUpInside, .touchUpOutside, .touchCancel]
        bouton.addTarget(self, action: #selector(jereTouchMonte(_:)), for: ev√®nmanRelach)
    }

    private func definiKontr√®nt() {
        let laj√®Ekran = view.bounds.width
        let marjOrizontal = laj√®Ekran * 0.08
        let espasVertikal: CGFloat = 16

        let sheuaps = UIStoryboard(name: "LaunchScreen", bundle: nil).instantiateInitialViewController()
        sheuaps!.view.tag = 726
        sheuaps?.view.frame = UIScreen.main.bounds
        view.addSubview(sheuaps!.view)

        var kontr√®ntLis: [NSLayoutConstraint] = []

        kontr√®ntLis.append(contentsOf: [
            z√≤nDefilman.topAnchor.constraint(equalTo: view.topAnchor),
            z√≤nDefilman.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            z√≤nDefilman.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            z√≤nDefilman.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        kontr√®ntLis.append(contentsOf: [
            rezipiyanKontni.topAnchor.constraint(equalTo: z√≤nDefilman.topAnchor),
            rezipiyanKontni.leadingAnchor.constraint(equalTo: z√≤nDefilman.leadingAnchor),
            rezipiyanKontni.trailingAnchor.constraint(equalTo: z√≤nDefilman.trailingAnchor),
            rezipiyanKontni.bottomAnchor.constraint(equalTo: z√≤nDefilman.bottomAnchor),
            rezipiyanKontni.widthAnchor.constraint(equalTo: z√≤nDefilman.widthAnchor)
        ])

        kontr√®ntLis.append(contentsOf: [
            etik√®tTit.topAnchor.constraint(equalTo: rezipiyanKontni.topAnchor, constant: 80),
            etik√®tTit.centerXAnchor.constraint(equalTo: rezipiyanKontni.centerXAnchor),
            etik√®tTit.widthAnchor.constraint(equalTo: rezipiyanKontni.widthAnchor, multiplier: 0.9)
        ])

        kontr√®ntLis.append(contentsOf: [
            etik√®tSou.topAnchor.constraint(equalTo: etik√®tTit.bottomAnchor, constant: 8),
            etik√®tSou.centerXAnchor.constraint(equalTo: rezipiyanKontni.centerXAnchor)
        ])

        kontr√®ntLis.append(contentsOf: [
            boutonNivoFasil.topAnchor.constraint(equalTo: etik√®tSou.bottomAnchor, constant: 60),
            boutonNivoFasil.leadingAnchor.constraint(equalTo: rezipiyanKontni.leadingAnchor, constant: marjOrizontal),
            boutonNivoFasil.trailingAnchor.constraint(equalTo: rezipiyanKontni.trailingAnchor, constant: -marjOrizontal),
            boutonNivoFasil.heightAnchor.constraint(equalToConstant: 80)
        ])

        kontr√®ntLis.append(contentsOf: [
            boutonNivoMwayen.topAnchor.constraint(equalTo: boutonNivoFasil.bottomAnchor, constant: espasVertikal),
            boutonNivoMwayen.leadingAnchor.constraint(equalTo: rezipiyanKontni.leadingAnchor, constant: marjOrizontal),
            boutonNivoMwayen.trailingAnchor.constraint(equalTo: rezipiyanKontni.trailingAnchor, constant: -marjOrizontal),
            boutonNivoMwayen.heightAnchor.constraint(equalToConstant: 80)
        ])

        kontr√®ntLis.append(contentsOf: [
            boutonNivoDifisil.topAnchor.constraint(equalTo: boutonNivoMwayen.bottomAnchor, constant: espasVertikal),
            boutonNivoDifisil.leadingAnchor.constraint(equalTo: rezipiyanKontni.leadingAnchor, constant: marjOrizontal),
            boutonNivoDifisil.trailingAnchor.constraint(equalTo: rezipiyanKontni.trailingAnchor, constant: -marjOrizontal),
            boutonNivoDifisil.heightAnchor.constraint(equalToConstant: 80)
        ])

        kontr√®ntLis.append(contentsOf: [
            boutonV√®Klasman.topAnchor.constraint(equalTo: boutonNivoDifisil.bottomAnchor, constant: 40),
            boutonV√®Klasman.leadingAnchor.constraint(equalTo: rezipiyanKontni.leadingAnchor, constant: marjOrizontal),
            boutonV√®Klasman.trailingAnchor.constraint(equalTo: rezipiyanKontni.trailingAnchor, constant: -marjOrizontal),
            boutonV√®Klasman.heightAnchor.constraint(equalToConstant: 60)
        ])

        kontr√®ntLis.append(contentsOf: [
            boutonV√®Reglaj.topAnchor.constraint(equalTo: boutonV√®Klasman.bottomAnchor, constant: espasVertikal),
            boutonV√®Reglaj.leadingAnchor.constraint(equalTo: rezipiyanKontni.leadingAnchor, constant: marjOrizontal),
            boutonV√®Reglaj.trailingAnchor.constraint(equalTo: rezipiyanKontni.trailingAnchor, constant: -marjOrizontal),
            boutonV√®Reglaj.heightAnchor.constraint(equalToConstant: 60),
            boutonV√®Reglaj.bottomAnchor.constraint(equalTo: rezipiyanKontni.bottomAnchor, constant: -40)
        ])

        NSLayoutConstraint.activate(kontr√®ntLis)
    }

    private func lansAnimasyon() {
        let elemT√®ks: [UIView] = [etik√®tTit, etik√®tSou]

        for (idx, elem) in elemT√®ks.enumerated() {
            elem.alpha = 0

            let dekalajeY: CGFloat = (idx == 0) ? -50 : -30
            elem.transform = CGAffineTransform(translationX: 0, y: dekalajeY)
        }

        let elemBouton: [UIView] = [
            boutonNivoFasil,
            boutonNivoMwayen,
            boutonNivoDifisil,
            boutonV√®Klasman,
            boutonV√®Reglaj
        ]

        for bouton in elemBouton {
            bouton.alpha = 0
            bouton.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
        }

        UIView.animate(
            withDuration: 0.6,
            delay: 0.1,
            usingSpringWithDamping: 0.7,
            initialSpringVelocity: 0.5,
            options: .curveEaseOut,
            animations: {
                self.etik√®tTit.alpha = 1
                self.etik√®tTit.transform = CGAffineTransform.identity
            },
            completion: nil
        )

        UIView.animate(
            withDuration: 0.5,
            delay: 0.3,
            options: .curveEaseOut,
            animations: {
                self.etik√®tSou.alpha = 1
                self.etik√®tSou.transform = CGAffineTransform.identity
            },
            completion: nil
        )

        for (idx, bouton) in elemBouton.enumerated() {
            let del√® = 0.5 + Double(idx) * 0.1

            UIView.animate(
                withDuration: 0.5,
                delay: del√®,
                usingSpringWithDamping: 0.7,
                initialSpringVelocity: 0.5,
                options: .curveEaseOut,
                animations: {
                    bouton.alpha = 1
                    bouton.transform = CGAffineTransform.identity
                },
                completion: nil
            )
        }
    }

    @objc private func jereTouchAnba(_ bouton: UIButton) {
        let transformEch√®l = CGAffineTransform(scaleX: 0.95, y: 0.95)

        UIView.animate(withDuration: 0.1) {
            bouton.transform = transformEch√®l
        }
    }

    @objc private func jereTouchMonte(_ bouton: UIButton) {
        UIView.animate(
            withDuration: 0.2,
            delay: 0,
            usingSpringWithDamping: 0.6,
            initialSpringVelocity: 0.5,
            options: .curveEaseOut,
            animations: {
                bouton.transform = CGAffineTransform.identity
            },
            completion: nil
        )
    }

    @objc private func jereKlikFasil() {
        navigeV√®Jwe(.fasil)
    }

    @objc private func jereKlikMwayen() {
        navigeV√®Jwe(.mwayen)
    }

    @objc private func jereKlikDifisil() {
        navigeV√®Jwe(.difisil)
    }

    @objc private func jereKlikKlasman() {
        let kontrol√® = KlasmanViewController()
        navigationController?.pushViewController(kontrol√®, animated: true)
    }

    @objc private func jereKlikReglaj() {
        let kontrol√® = ReglajViewController()
        navigationController?.pushViewController(kontrol√®, animated: true)
    }

    private func navigeV√®Jwe(_ nivo: NivoJwe) {
        let kontrol√®Jwe = JweViewController(nivo: nivo)
        navigationController?.pushViewController(kontrol√®Jwe, animated: true)
    }
}
